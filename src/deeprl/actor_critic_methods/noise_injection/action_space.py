from abc import ABC, abstractmethod

import torch
from torch import Tensor


class ActionNoise(ABC):
    """Random process for action exploration"""

    @abstractmethod
    def __call__(self, action: Tensor) -> Tensor:
        ...


class Gaussian(ActionNoise):
    """https://en.wikipedia.org/wiki/Additive_white_Gaussian_noise"""

    def __init__(self, stddev: float) -> None:
        self.stddev = stddev

    def __call__(self, action: Tensor) -> Tensor:
        return torch.randn_like(action) * self.stddev


class OrnsteinUhlenbeck(ActionNoise):
    """
    It stabilises zero-mean Gaussian Noise.
    It helps agent explore better in an inertial system.
    Don't abuse Ornstein-Uhlenbeck Process. It has too much hyperparameters and over fine-tuning make no sense.
    """

    def __init__(self) -> None:
        raise NotImplementedError

    def __call__(self, action: Tensor) -> Tensor:
        """Output noise generated by Ornstein-Uhlenbeck Process"""
        raise NotImplementedError
