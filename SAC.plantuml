@startuml SAC

class SAC {
  # policy: nn.Module
  # qualities: List[nn.Module]
  # log_temperature: Tensor
  # target_qualities: List[nn.Module]
  # target_entropy: float
  # policy_optimiser: Optimizer
  # quality_optimiser: Optimizer
  # temperature_optimiser: Optimizer
  # experience_replay: ExperienceReplay
  # batch_size: int
  # discount_factor: float
  # polyak_factor: float
  + compute_action(state: Tensor) -> Tensor
  + step(state, action, reward, next_state, terminated)
}

class TanhGaussianPolicy {
  + forward(self, state: Tensor) -> Union[Distribution, Tensor]
}

class Quality {
  + forward(self, state: Tensor, action: Tensor) -> Tensor
}

class UER {
  + push(self, state, action, reward, next_state, terminated)
  + sample(self, batch_size: int) -> Batch:
}

TanhGaussianPolicy --* SAC : policy
Quality --* SAC : qualities
UER --* SAC : experience_replay

hide empty fields
@enduml
